@page "/ClearAll"
@inject ChamadaAPI chamadaAPI
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<PageTitle>Limpar Dados</PageTitle>

<h1 Style="margin-left: 20px">Limpar BD</h1>
<br />
<h4 style="margin-left: 20px">Para eliminar o registo das chamadas na base de dados basta carregar no botão vermelho abaixo.</h4>

<div style="display: flex; justify-content: center; align-items: center; height: 50vh;">
    <MudButton Disabled="@_processing" OnClick="EliminarDados" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.DeleteForever" Style="background-color: red; color: white; width: 200px; height: 60px;">
        @if (_processing)
        {
            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
            <MudText Class="ms-2">Processing</MudText>
        }
        else
        {
            <MudText>Eliminar Todas as Chamadas</MudText>
        }
    </MudButton>
</div>

@code {
    private bool _processing = false;
    private async Task EliminarDados()
    {
        try
        {
            var confirm = await DialogService.ShowMessageBox(
                "Confirmação",
                $"Tem certeza que deseja eliminar todas as chamadas?",
                yesText: "Sim", noText: "Não");
            if (confirm == true)
            {
                _processing = true;
                await chamadaAPI.RemoverChamadasAsync();
                var chamadas = await chamadaAPI.ListarChamadasAsync();
                if (chamadas is null)
                {
                    Snackbar.Add($"Erro ao eliminar chamadas", MudBlazor.Severity.Error);
                }
                _processing = false;
            }
        }
        catch
        {
            _processing = false;
            Snackbar.Add("Chamadas eliminadas com sucesso!", MudBlazor.Severity.Success);
        }
        finally
        {
            _processing = false;
        }
    }
}
