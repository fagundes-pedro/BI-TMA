@page "/ImportarChamadas"
@using BI_TMA.Web.Services

@inject ImportarChamadasAPI importarChamadasAPI
@inject ISnackbar Snackbar

<PageTitle>Importar Chamadas</PageTitle>

<MudStack Style ="margin-left: 20px; width: 80%">
    <MudForm Model="@_model"
    @bind-IsValid="_isValid"
    @bind-IsTouched="_isTouched"
    Validation="@_validationRules.ValidateValue">
        <MudItem xs="12">
            <MudFileUpload T="IReadOnlyList<IBrowserFile>"
            @ref="@_fileUpload"
            @bind-Files="_model.Files"
            For="@(() => _model.Files)"
            AppendMultipleFiles
            Hidden="@false"
            InputClass="absolute mud-width-full mud-height-full overflow-hidden z-10"
            InputStyle="opacity:0"
            ErrorText="@string.Empty"
            tabindex="-1"
            @ondrop="@ClearDragClass"
            @ondragenter="@SetDragClass"
            @ondragleave="@ClearDragClass"
            @ondragend="@ClearDragClass">
                <ActivatorContent>
                    <MudPaper Height="300px"
                    Outlined="true"
                    Class="@_dragClass">
                        <MudText Typo="Typo.h6">
                            Arraste e solte o ficheiro aqui ou clique
                        </MudText>
                        @foreach (var file in _model.Files?.Select(file => file.Name) ?? Enumerable.Empty<string>())
                        {
                            <MudChip T="string" Color="MudBlazor.Color.Dark" Text="@file" />
                        }
                    </MudPaper>
                </ActivatorContent>
            </MudFileUpload>
            <MudToolBar Gutters="@false"
            Class="relative d-flex justify-end gap-4">
                <MudButton Color="MudBlazor.Color.Primary"
                OnClick="@OpenFilePickerAsync"
                Variant="Variant.Filled">
                    ABRIR PESQUISADOR DE FICHEIROS
                </MudButton>
                <MudButton Color="MudBlazor.Color.Primary"
                           Disabled="@(!_isValid || !_isTouched || _model.Files is null || !_model.Files.Any() || _processing)"
                OnClick="@Upload"
                Variant="Variant.Filled">
                    @if (_processing)
                    {
                        <MudProgressCircular Class="ms-n1" Size="MudBlazor.Size.Small" Indeterminate="true" />
                        <MudText Class="ms-2">CARREGANDO</MudText>
                    }
                    else
                    {
                        <MudText>CARREGAR</MudText>
                    }
                </MudButton>
                <MudButton Color="MudBlazor.Color.Error"
                Disabled="@(_model.Files is null || !_model.Files.Any())"
                OnClick="@ClearAsync"
                Variant="Variant.Filled">
                    LIMPAR
                </MudButton>
            </MudToolBar>
        </MudItem>
        <MudItem>
            @if (_fileUpload?.ValidationErrors.Any() ?? false)
            {
                <MudText Color="MudBlazor.Color.Error"
                Typo="@Typo.caption">
                    @_fileUpload?.ValidationErrors[0]
                </MudText>
            }
        </MudItem>
        <MudItem xs="12">
            IsValid: @_isValid - IsTouched: @_isTouched
        </MudItem>
    </MudForm>
</MudStack>

@code {
    #nullable enable
    public class Model
    {
        public IReadOnlyList<IBrowserFile>? Files { get; set; } = new List<IBrowserFile>();
    }

    private Model _model = new();
    private ModelFluentValidator _validationRules = new();
    private MudFileUpload<IReadOnlyList<IBrowserFile>>? _fileUpload;
    private bool _isValid;
    private bool _isTouched;
    private bool _processing = false;
    private const string FileContent = "this is content";
    private const string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full";
    private string _dragClass = DefaultDragClass;

    private async Task Upload()
    {
        if (_fileUpload?.Files is null || !_fileUpload.Files.Any())
        {
            Snackbar.Add("Nenhum ficheiro selecionado para upload.", MudBlazor.Severity.Warning);
            return;
        }
        foreach (var file in _fileUpload.Files)
        {
            _processing = true;
            using var stream = file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024); // Limite de 10 MB
            await importarChamadasAPI.EnviarFicheiroAsync(stream, file.Name);
        }
        Snackbar.Add("Ficheiros enviados com sucesso!", MudBlazor.Severity.Success);
        _processing = false;
        await ClearAsync();
    }

    private void SetDragClass()
        => _dragClass = $"{DefaultDragClass} mud-border-primary";

    private void ClearDragClass()
        => _dragClass = DefaultDragClass;

    private Task OpenFilePickerAsync()
        => _fileUpload?.OpenFilePickerAsync() ?? Task.CompletedTask;

    private Task ClearAsync()
        => _fileUpload?.ClearAsync() ?? Task.CompletedTask;

    public class ModelFluentValidator : AbstractValidator<Model>
    {
        public ModelFluentValidator()
        {
            RuleFor(x => x.Files)
                .NotEmpty()
                .WithMessage("There must be at least 1 file.");
        }

        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
        {
            var result = await ValidateAsync(ValidationContext<Model>.CreateWithOptions((Model)model, x => x.IncludeProperties(propertyName)));
            return result.IsValid ? Array.Empty<string>() : result.Errors.Select(e => e.ErrorMessage);
        };
    }
}