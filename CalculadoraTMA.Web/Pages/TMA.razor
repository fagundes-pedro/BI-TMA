@page "/TMA"
@inject AssistenteAPI assistenteAPI
@inject LinhaAPI linhaAPI

<PageTitle>TMA</PageTitle>

<h1 style="margin-left: 20px">Tempo Médio de Chamada</h1>

<p style="margin-left: 20px">Lista dos assistentes e seu respetivo TMA por linha</p>
<br />

@if (assistentes is null || linhas is null)
{
    <p style="margin-left: 20px"><em>Loading...</em></p>
}
else
{
    <MudSimpleTable style="margin-left: 20px" Hover="true" Dense="true" class="table">
        <thead>
            <tr>
                <th class="header-centered" style="position: sticky; left: 0; background-color: white; z-index: 1">NOME DO ASSISTENTE
                    <MudIconButton Icon="@sortIconNome" Size="Size.Small" OnClick="OrdenarPorNome" />
                </th>
                @foreach (var linha in linhas)
                {
                    <th class="header-centered" colspan="2">@linha.Nome</th>
                }
            </tr>
            <tr>
                <th style="position: sticky; left: 0; background-color: white"></th>
                @foreach (var linha in linhas)
                {
                    <th class="header-centered">TMA</th>
                    <th class="header-centered">Nº Chamadas</th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var assistente in DadosPaginados)
            {
                <tr>
                    <td style="position: sticky; left: 0; background-color: white">@assistente.Nome</td>
                    @foreach (var linha in linhas)
                    {
                        var linhaEncontrada = assistente.Linhas.FirstOrDefault(l => l.Nome == linha.Nome);
                        <td>@(linhaEncontrada != null ? linhaEncontrada.TMA : "-")</td>
                        <td>@(linhaEncontrada != null ? linhaEncontrada.NumeroDeChamadas : "-")</td>
                    }
                </tr>
            }
        </tbody>
    </MudSimpleTable>
    <MudToolBar>
        <MudSelect class="" T="int" FitContent="true" Placeholder="itensPorPagina" Label="Itens por página" ValueChanged="HandleItensPorPaginaChanged">
            <MudSelectItem T="int" Value="10">10</MudSelectItem>
            <MudSelectItem T="int" Value="15">15</MudSelectItem>
            <MudSelectItem T="int" Value="25">25</MudSelectItem>
            <MudSelectItem T="int" Value="50">50</MudSelectItem>
        </MudSelect>
        <MudSpacer />
        <MudPagination Count="@totalPaginas" SelectedChanged="HandlePageChanged"></MudPagination>
    </MudToolBar>
}

@code {
    private IEnumerable<AssistenteResponse>? assistentes;
    private IEnumerable<AssistenteResponse>? DadosPaginados;
    private IEnumerable<LinhaResponse>? linhas;
    private int paginaAtual = 1;
    private int itensPorPagina;
    private int totalPaginas = 0;

    private bool ordenacaoAscendenteNome = true;
    
    private string sortIconNome => ordenacaoAscendenteNome ? Icons.Material.Filled.ArrowUpward : Icons.Material.Filled.ArrowDownward;

    private void OrdenarPorNome()
    {
        ordenacaoAscendenteNome = !ordenacaoAscendenteNome;

        if (assistentes is not null)
        {
            assistentes = ordenacaoAscendenteNome
                ? assistentes.OrderBy(a => a.Nome).ToList()
                : assistentes.OrderByDescending(a => a.Nome).ToList();
        }

        AtualizarDados();
    }

    protected override async Task OnInitializedAsync()
    {
        assistentes = await assistenteAPI.ListarAssistentesAsync();
        linhas = await linhaAPI.ListarLinhasAsync();
        if (assistentes is not null)
        {
            assistentes = assistentes.OrderBy(a => a.Nome).ToList();
        }
        itensPorPagina = 10;
        AtualizarDados();
    }

    private void HandlePageChanged(int page)
    {
        paginaAtual = page;
        AtualizarDados();
    }

    private void HandleItensPorPaginaChanged(int value)
    {
        itensPorPagina = value;
        paginaAtual = 1;
        AtualizarDados();
    }

    private void AtualizarDados()
    {
        if (assistentes is not null && linhas is not null)
        {
            totalPaginas = (assistentes.Count() + itensPorPagina - 1) / itensPorPagina;
            DadosPaginados = assistentes.Skip((paginaAtual - 1) * itensPorPagina).Take(itensPorPagina);
            StateHasChanged();
        }
    }
}